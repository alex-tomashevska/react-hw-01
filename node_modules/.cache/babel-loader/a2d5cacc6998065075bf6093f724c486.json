{"ast":null,"code":"var _jsxFileName = \"/Users/aleksandra/study/react/react-hw-01/src/components/Statistics/Statistics.js\";\n\n/** @format */\nimport React from 'react';\nimport styles from './Statistics.module.css';\nimport PropTypes from 'prop-types'; //    border: solid 1px rgb(211, 221, 221);\n// const randomColor = () => {\n//  Math.floor(Math.random() * 999)\n//   const a =\n//   const b =\n//   const c =\n//   return `rgb(${a},${b},${c})`\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst randomUnder999 = () => Math.floor(Math.random() * 999);\n\nconst randomRGB = () => `rgb(${randomUnder999()},${randomUnder999()},${randomUnder999()})`;\n\nconst Statistics = _ref => {\n  let {\n    title,\n    stats\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.statistics,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.title,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.stat_list,\n      children: stats.map(stat => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.item,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.label,\n          children: stat.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: styles.percentage,\n          children: [stat.percentage, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this)]\n      }, stat.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Statistics;\nStatistics.propTypes = {\n  title: PropTypes.string.isRequired,\n  stats: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    percentage: PropTypes.number.isRequired\n  }))\n};\nexport default Statistics;\n\nvar _c;\n\n$RefreshReg$(_c, \"Statistics\");","map":{"version":3,"names":["React","styles","PropTypes","randomUnder999","Math","floor","random","randomRGB","Statistics","title","stats","statistics","stat_list","map","stat","item","label","percentage","id","propTypes","string","isRequired","arrayOf","shape","number"],"sources":["/Users/aleksandra/study/react/react-hw-01/src/components/Statistics/Statistics.js"],"sourcesContent":["/** @format */\n\nimport React from 'react'\nimport styles from './Statistics.module.css'\nimport PropTypes from 'prop-types'\n\n//    border: solid 1px rgb(211, 221, 221);\n\n// const randomColor = () => {\n//  Math.floor(Math.random() * 999)\n//   const a =\n//   const b =\n//   const c =\n//   return `rgb(${a},${b},${c})`\n// }\nconst randomUnder999 =  () => Math.floor(Math.random()*999)\n\nconst randomRGB = () => `rgb(${randomUnder999()},${randomUnder999()},${randomUnder999()})`\n\nconst Statistics = ({ title, stats }) => {\n  return (\n    <section className={styles.statistics}>\n      <h2 className={styles.title}>{title}</h2>\n\n      <ul className={styles.stat_list}>\n        {stats.map((stat) => (\n          <li className={styles.item} key={stat.id}>\n            <span className={styles.label}>{stat.label}</span>\n            <span className={styles.percentage}>{stat.percentage}%</span>\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nStatistics.propTypes = {\n  title: PropTypes.string.isRequired,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      percentage: PropTypes.number.isRequired,\n    }),\n  ),\n}\n\nexport default Statistics\n"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,cAAc,GAAI,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,GAAzB,CAA9B;;AAEA,MAAMC,SAAS,GAAG,MAAO,OAAMJ,cAAc,EAAG,IAAGA,cAAc,EAAG,IAAGA,cAAc,EAAG,GAAxF;;AAEA,MAAMK,UAAU,GAAG,QAAsB;EAAA,IAArB;IAAEC,KAAF;IAASC;EAAT,CAAqB;EACvC,oBACE;IAAS,SAAS,EAAET,MAAM,CAACU,UAA3B;IAAA,wBACE;MAAI,SAAS,EAAEV,MAAM,CAACQ,KAAtB;MAAA,UAA8BA;IAA9B;MAAA;MAAA;MAAA;IAAA,QADF,eAGE;MAAI,SAAS,EAAER,MAAM,CAACW,SAAtB;MAAA,UACGF,KAAK,CAACG,GAAN,CAAWC,IAAD,iBACT;QAAI,SAAS,EAAEb,MAAM,CAACc,IAAtB;QAAA,wBACE;UAAM,SAAS,EAAEd,MAAM,CAACe,KAAxB;UAAA,UAAgCF,IAAI,CAACE;QAArC;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAM,SAAS,EAAEf,MAAM,CAACgB,UAAxB;UAAA,WAAqCH,IAAI,CAACG,UAA1C;QAAA;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA,GAAiCH,IAAI,CAACI,EAAtC;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD,CAfD;;KAAMV,U;AAiBNA,UAAU,CAACW,SAAX,GAAuB;EACrBV,KAAK,EAAEP,SAAS,CAACkB,MAAV,CAAiBC,UADH;EAErBX,KAAK,EAAER,SAAS,CAACoB,OAAV,CACLpB,SAAS,CAACqB,KAAV,CAAgB;IACdL,EAAE,EAAEhB,SAAS,CAACkB,MAAV,CAAiBC,UADP;IAEdL,KAAK,EAAEd,SAAS,CAACkB,MAAV,CAAiBC,UAFV;IAGdJ,UAAU,EAAEf,SAAS,CAACsB,MAAV,CAAiBH;EAHf,CAAhB,CADK;AAFc,CAAvB;AAWA,eAAeb,UAAf"},"metadata":{},"sourceType":"module"}